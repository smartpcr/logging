global:
  subscriptionName: "{{ .Values.global.subscriptionName }}"
  tenantId: "{{ .Values.global.tenantId }}"
  location: "{{ .Values.global.location }}"
  servicePrincipal: "{{ .Values.global.productShortName }}-{{ .Values.global.envName }}-{{ .Values.global.owner }}-{{ .Values.global.loc }}-spn"
  resourceGroup: "{{ .Values.global.productName }}-{{ .Values.global.envName }}-{{ .Values.global.owner }}-{{ .Values.global.loc }}-rg"
  aks: true
  acr: true
  appInsights: true 
  mongoDb: true
  docDb: false 
  graphDb: false 
  apps:
    - generatorapi
    - generatorweb
kv:
  name: "{{ .Values.global.subscriptionAlias }}-kv"
  resourceGroup: "{{ .Values.global.subscriptionAlias }}-rg"
  location: "{{ .Values.global.location }}"
terraform:
  resourceGroup: "{{ .Values.global.owner }}-tf-rg"
  location: "{{ .Values.global.location }}"
  servicePrincipal: "{{ .Values.global.productShortName }}-{{ .Values.global.envName }}-{{ .Values.global.owner }}-tf-spn"
  servicePrincipalAppId: 
  servicePrincipalSecretName: "{{ .Values.global.productShortName }}-{{ .Values.global.envName }}-{{ .Values.global.owner }}-tf-spn-pwd"
  stateStorageAccountName: "{{ .Values.global.owner }}tfstorage"
  stateStorageAccountConnectionString:
  stateBlobContainerName: "tfstate"
acr:
  name: "{{ .Values.global.subscriptionAlias }}{{ .Values.global.envName }}acr"
  resourceGroup: "{{ .Values.global.owner }}-acr-rg"
  location: "{{ .Values.global.location }}"
  passwordSecretName: "{{ .Values.global.owner }}-{{ .Values.global.envName }}-acr-pwd"
  email: "{{ .Values.acr.email }}"
aks:
  clusterName: "{{ .Values.global.productShortName }}-{{ .Values.global.envName }}-{{ .Values.global.owner }}-k8s-cluster"
  resourceGroup: "{{ .Values.global.productName }}-{{ .Values.global.envName }}-{{ .Values.global.owner }}-k8s-rg"
  location: "{{ .Values.global.location }}"
  dnsPrefix: {{ .Values.aks.aksDnsPrefix }}
  version: "1.11.9"
  servicePrincipal: "{{ .Values.global.productShortName }}-{{ .Values.global.envName }}-{{ .Values.global.owner }}-k8s-spn"
  servicePrincipalPassword: "{{ .Values.global.productShortName }}-{{ .Values.global.envName }}-{{ .Values.global.owner }}-k8s-spn-pwd"
  clientAppName: "{{ .Values.global.productShortName }}-{{ .Values.global.envName }}-{{ .Values.global.owner }}-k8s-client"
  ownerUpn: "{{ .Values.aks.aksOwnerAadUpn }}"
  nodeCount: 3
  vmSize: Standard_D2_v2
  adminUserName: "{{ .Values.aks.adminUsername }}"
  ssh_pubblic_key: "{{ .Values.global.productShortName }}-{{ .Values.global.envName }}-{{ .Values.global.owner }}-k8s-ssh-pub"
  ssh_private_key: "{{ .Values.global.productShortName }}-{{ .Values.global.envName }}-{{ .Values.global.owner }}-k8s-ssh-key"
  ssh_cert_pwd_ame: "{{ .Values.global.productShortName }}-{{ .Values.global.envName }}-{{ .Values.global.owner }}-k8s-ssh-pwd"
  purpose: "{{ .Values.aks.purpose }}"
  useDevSpaces: true
  monitoring:
    namespace: monitoring 
    charts:
      installPrometheus: false  # include alert-manager, node-exporter and appinsights connector
      installTelegraf: false 
      installInfluentd: false 
  secrets:
    addContainerRegistryAccess: false 
    addKeyVaultAccess: false 
    addAppInsightsKey: false 
appInsights:
  resourceGroup: "{{ .Values.global.productName }}-{{ .Values.global.envName }}-{{ .Values.global.owner }}-{{ .Values.global.loc }}-rg"
  resourceType: "Microsoft.Insights/components"
  name: "{{ .Values.global.productName }}-{{ .Values.global.envName }}-{{ .Values.global.owner }}-appinsights"
  location: "West US 2"
  applicationType: web
  instrumentationKeySecret: "app-insights-instrumentation-key"
docDb:
  account: "{{ .Values.global.productName }}-{{ .Values.global.envName }}-{{ .Values.global.owner }}-docdb"
  api: "SQL"
  db: "docs"
  collection: "requirements"
  keySecret: "docdb-key"
mongoDb:
  account: "{{ .Values.global.productName }}-{{ .Values.global.envName }}-{{ .Values.global.owner }}-mongodb"
  api: "Mongo"
  db: "docs"
  collection: "requirements"
  keySecret: "mongodb-key"
graphDb:
  account: "{{ .Values.global.productName }}-{{ .Values.global.envName }}-{{ .Values.global.owner }}-graphdb"
  api: "Gremlin"
  db: "graph"
  collection: "requirements"
  keySecret: "graphdb-key"
prometheus:
  manifest: deploy/aks/prom/manifest-all.yaml
secrets:
  containerRegistry:
    key: acr
    name: dockerRegistry
    type: kubernetes.io/dockerconfigjson
    namespace: "{{ .Values.global.owner }}"
  keyVault:
    key: kv 
    name: kvCert  
    type: Opaque
    namespace: "{{ .Values.global.owner }}"
  appInsights:
    key: ai 
    name: appInsightsInstrumentationKey
    type: Opaque
    namespace: "{{ .Values.global.owner }}"
apps:
  generatorapi:
    chart: "charts/generatorapi"
    useKeyVault: true 
  generatorweb:
    chart: "charts/generatorweb"
    useKeyVault: false 